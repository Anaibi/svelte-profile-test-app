var app = (function () {
	'use strict';

	function noop() {}

	function assign(tar, src) {
		for (var k in src) tar[k] = src[k];
		return tar;
	}

	function assignTrue(tar, src) {
		for (var k in src) tar[k] = 1;
		return tar;
	}

	function appendNode(node, target) {
		target.appendChild(node);
	}

	function insertNode(node, target, anchor) {
		target.insertBefore(node, anchor);
	}

	function detachNode(node) {
		node.parentNode.removeChild(node);
	}

	function reinsertBetween(before, after, target) {
		while (before.nextSibling && before.nextSibling !== after) {
			target.appendChild(before.parentNode.removeChild(before.nextSibling));
		}
	}

	function reinsertChildren(parent, target) {
		while (parent.firstChild) target.appendChild(parent.firstChild);
	}

	function destroyEach(iterations) {
		for (var i = 0; i < iterations.length; i += 1) {
			if (iterations[i]) iterations[i].d();
		}
	}

	function createFragment() {
		return document.createDocumentFragment();
	}

	function createElement(name) {
		return document.createElement(name);
	}

	function createSvgElement(name) {
		return document.createElementNS('http://www.w3.org/2000/svg', name);
	}

	function createText(data) {
		return document.createTextNode(data);
	}

	function createComment() {
		return document.createComment('');
	}

	function addListener(node, event, handler) {
		node.addEventListener(event, handler, false);
	}

	function removeListener(node, event, handler) {
		node.removeEventListener(event, handler, false);
	}

	function setAttribute(node, attribute, value) {
		node.setAttribute(attribute, value);
	}

	function setStyle(node, key, value) {
		node.style.setProperty(key, value);
	}

	function blankObject() {
		return Object.create(null);
	}

	function destroy(detach) {
		this.destroy = noop;
		this.fire('destroy');
		this.set = noop;

		if (detach !== false) this._fragment.u();
		this._fragment.d();
		this._fragment = null;
		this._state = {};
	}

	function destroyDev(detach) {
		destroy.call(this, detach);
		this.destroy = function() {
			console.warn('Component was already destroyed');
		};
	}

	function _differs(a, b) {
		return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');
	}

	function fire(eventName, data) {
		var handlers =
			eventName in this._handlers && this._handlers[eventName].slice();
		if (!handlers) return;

		for (var i = 0; i < handlers.length; i += 1) {
			var handler = handlers[i];

			if (!handler.__calling) {
				handler.__calling = true;
				handler.call(this, data);
				handler.__calling = false;
			}
		}
	}

	function get() {
		return this._state;
	}

	function init(component, options) {
		component._handlers = blankObject();
		component._bind = options._bind;

		component.options = options;
		component.root = options.root || component;
		component.store = component.root.store || options.store;
	}

	function on(eventName, handler) {
		var handlers = this._handlers[eventName] || (this._handlers[eventName] = []);
		handlers.push(handler);

		return {
			cancel: function() {
				var index = handlers.indexOf(handler);
				if (~index) handlers.splice(index, 1);
			}
		};
	}

	function set(newState) {
		this._set(assign({}, newState));
		if (this.root._lock) return;
		this.root._lock = true;
		callAll(this.root._beforecreate);
		callAll(this.root._oncreate);
		callAll(this.root._aftercreate);
		this.root._lock = false;
	}

	function _set(newState) {
		var oldState = this._state,
			changed = {},
			dirty = false;

		for (var key in newState) {
			if (this._differs(newState[key], oldState[key])) changed[key] = dirty = true;
		}
		if (!dirty) return;

		this._state = assign(assign({}, oldState), newState);
		this._recompute(changed, this._state);
		if (this._bind) this._bind(changed, this._state);

		if (this._fragment) {
			this.fire("state", { changed: changed, current: this._state, previous: oldState });
			this._fragment.p(changed, this._state);
			this.fire("update", { changed: changed, current: this._state, previous: oldState });
		}
	}

	function setDev(newState) {
		if (typeof newState !== 'object') {
			throw new Error(
				this._debugName + '.set was called without an object of data key-values to update.'
			);
		}

		this._checkReadOnly(newState);
		set.call(this, newState);
	}

	function callAll(fns) {
		while (fns && fns.length) fns.shift()();
	}

	function _mount(target, anchor) {
		this._fragment[this._fragment.i ? 'i' : 'm'](target, anchor || null);
	}

	function _unmount() {
		if (this._fragment) this._fragment.u();
	}

	var protoDev = {
		destroy: destroyDev,
		get,
		fire,
		on,
		set: setDev,
		_recompute: noop,
		_set,
		_mount,
		_unmount,
		_differs
	};

	/* src/Icons/SVG_Search.html generated by Svelte v2.4.4 */

	function create_main_fragment(component, ctx) {
		var svg, path, path_1;

		return {
			c: function create() {
				svg = createSvgElement("svg");
				path = createSvgElement("path");
				path_1 = createSvgElement("path");
				setAttribute(path, "d", "M20,0c-6.627,0-12,5.373-12,12c0,2.026,0.507,3.933,1.395,5.608L1.052,25.95l0.007,0.006 c-0.652,0.641-1.058,1.529-1.058,2.516c0,1.949,1.58,3.529,3.529,3.529c0.985,0,1.874-0.406,2.515-1.059L6.043,30.94l8.341-8.34 C16.059,23.491,17.969,24,20,24c6.627,0,12-5.373,12-12S26.628,0,20,0z M4.796,29.692c-0.322,0.334-0.768,0.543-1.266,0.543 c-0.975,0-1.765-0.789-1.765-1.764c0-0.498,0.21-0.943,0.543-1.266l-0.009-0.008l8.066-8.066c0.705,0.951,1.545,1.791,2.494,2.498 L4.796,29.692z M20,22.001c-5.522,0-10-4.479-10-10c0-5.522,4.478-10,10-10c5.521,0,10,4.478,10,10 C30,17.522,25.521,22.001,20,22.001z");
				setAttribute(path_1, "d", "M20,5c-3.867,0-7,3.134-7,7c0,0.276,0.224,0.5,0.5,0.5s0.5-0.224,0.5-0.5c0-3.313,2.686-6,6-6 c0.275,0,0.5-0.224,0.5-0.5S20.275,5,20,5z");
				setAttribute(svg, "viewBox", "0 0 32.001 32.001");
				setAttribute(svg, "stroke", "none");
				setAttribute(svg, "fill", "CurrentColor");
			},

			m: function mount(target, anchor) {
				insertNode(svg, target, anchor);
				appendNode(path, svg);
				appendNode(path_1, svg);
			},

			p: noop,

			u: function unmount() {
				detachNode(svg);
			},

			d: noop
		};
	}

	function SVG_Search(options) {
		this._debugName = '<SVG_Search>';
		if (!options || (!options.target && !options.root)) throw new Error("'target' is a required option");
		init(this, options);
		this._state = assign({}, options.data);

		this._fragment = create_main_fragment(this, this._state);

		if (options.target) {
			if (options.hydrate) throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
			this._fragment.c();
			this._mount(options.target, options.anchor);
		}
	}

	assign(SVG_Search.prototype, protoDev);

	SVG_Search.prototype._checkReadOnly = function _checkReadOnly(newState) {
	};

	/* src/Icons/SVG_Edit.html generated by Svelte v2.4.4 */

	function create_main_fragment$1(component, ctx) {
		var svg, path, path_1;

		return {
			c: function create() {
				svg = createSvgElement("svg");
				path = createSvgElement("path");
				path_1 = createSvgElement("path");
				setAttribute(path, "d", "M36.573,309.292h2.09l100.833-21.943c1.964-0.327,3.784-1.237,5.224-2.612L315.56,113.896 c12.48-12.453,19.443-29.391,19.331-47.02c0.023-17.766-6.917-34.833-19.331-47.543C303.108,6.853,286.17-0.11,268.54,0.003 c-17.742-0.157-34.76,7.028-47.02,19.853L51.201,190.696c-1.502,1.209-2.597,2.85-3.135,4.702L26.124,296.231 c-0.599,3.62,0.565,7.308,3.135,9.927C31.188,308.126,33.817,309.253,36.573,309.292z M268.54,20.901 c25.103-0.002,45.454,20.347,45.456,45.45c0,0.175-0.001,0.35-0.003,0.525c0.171,11.959-4.547,23.47-13.061,31.869 l-64.261-64.784C245.137,25.548,256.604,20.848,268.54,20.901z M222.042,49.113l64.261,64.261L137.405,261.749l-64.261-63.739 L222.042,49.113z M64.785,218.909l51.722,51.722L50.156,285.26L64.785,218.909z");
				setAttribute(path_1, "d", "M368.328,365.717H18.287c-5.771,0-10.449,4.678-10.449,10.449s4.678,10.449,10.449,10.449h350.041 c5.771,0,10.449-4.678,10.449-10.449S374.099,365.717,368.328,365.717z");
				setAttribute(svg, "viewBox", "0 0 386.615 386.615");
				setAttribute(svg, "fill", "CurrentColor");
				setAttribute(svg, "stroke", "none");
			},

			m: function mount(target, anchor) {
				insertNode(svg, target, anchor);
				appendNode(path, svg);
				appendNode(path_1, svg);
			},

			p: noop,

			u: function unmount() {
				detachNode(svg);
			},

			d: noop
		};
	}

	function SVG_Edit(options) {
		this._debugName = '<SVG_Edit>';
		if (!options || (!options.target && !options.root)) throw new Error("'target' is a required option");
		init(this, options);
		this._state = assign({}, options.data);

		this._fragment = create_main_fragment$1(this, this._state);

		if (options.target) {
			if (options.hydrate) throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
			this._fragment.c();
			this._mount(options.target, options.anchor);
		}
	}

	assign(SVG_Edit.prototype, protoDev);

	SVG_Edit.prototype._checkReadOnly = function _checkReadOnly(newState) {
	};

	/* src/Icons/SVG_Message.html generated by Svelte v2.4.4 */

	function create_main_fragment$2(component, ctx) {
		var svg, path, g, circle, circle_1;

		return {
			c: function create() {
				svg = createSvgElement("svg");
				path = createSvgElement("path");
				g = createSvgElement("g");
				circle = createSvgElement("circle");
				circle_1 = createSvgElement("circle");
				setAttribute(path, "d", "M8.3 1c-4.4 0-8.3 2.6-8.3 5.6 0 2 1.1 3.7 3 4.7 0 0 0 0 0 0s0 0.1 0 0.1c-0.1 1.3-0.9 1.7-0.9 1.7l-1.8 0.9h2c2.5 0 4.3-1.1 5.1-1.9 0.3 0 0.5 0 0.8 0 4.3 0 7.8-2.5 7.8-5.6s-3.4-5.5-7.7-5.5zM8.2 11.1c-0.3 0-0.7 0-0.9 0h-0.3l-0.2 0.2c-0.5 0.5-1.6 1.4-3.3 1.7 0.3-0.5 0.5-1.1 0.5-2v-0.3l-0.3-0.1c-1.8-0.9-2.7-2.3-2.7-4 0-2.4 3.5-4.6 7.3-4.6 3.7 0 6.7 2 6.7 4.6 0 2.4-3.1 4.5-6.8 4.5z");
				setStyle(circle, "stroke", "var(--bg, white)");
				setStyle(circle, "fill", "none");
				setAttribute(circle, "r", "3");
				setAttribute(circle, "cy", "3");
				setAttribute(circle, "cx", "13");
				setStyle(circle_1, "stroke", "CurrentColor");
				setStyle(circle_1, "fill", "var(--bg, white)");
				setAttribute(circle_1, "r", "2");
				setAttribute(circle_1, "cy", "3");
				setAttribute(circle_1, "cx", "13");
				setAttribute(g, "class", "active");
				setAttribute(svg, "viewBox", "0 0 16 16");
				setAttribute(svg, "stroke", "none");
				setAttribute(svg, "fill", "CurrentColor");
			},

			m: function mount(target, anchor) {
				insertNode(svg, target, anchor);
				appendNode(path, svg);
				appendNode(g, svg);
				appendNode(circle, g);
				appendNode(circle_1, g);
			},

			p: noop,

			u: function unmount() {
				detachNode(svg);
			},

			d: noop
		};
	}

	function SVG_Message(options) {
		this._debugName = '<SVG_Message>';
		if (!options || (!options.target && !options.root)) throw new Error("'target' is a required option");
		init(this, options);
		this._state = assign({}, options.data);

		this._fragment = create_main_fragment$2(this, this._state);

		if (options.target) {
			if (options.hydrate) throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
			this._fragment.c();
			this._mount(options.target, options.anchor);
		}
	}

	assign(SVG_Message.prototype, protoDev);

	SVG_Message.prototype._checkReadOnly = function _checkReadOnly(newState) {
	};

	/* src/Icons/SVG_Agenda.html generated by Svelte v2.4.4 */

	function create_main_fragment$3(component, ctx) {
		var svg, path, path_1, path_2, path_3;

		return {
			c: function create() {
				svg = createSvgElement("svg");
				path = createSvgElement("path");
				path_1 = createSvgElement("path");
				path_2 = createSvgElement("path");
				path_3 = createSvgElement("path");
				setAttribute(path, "d", "M589.328,90.508H534.97v-36.3C534.971,24.317,510.655,0,480.765,0c-29.889,0-54.205,24.317-54.205,54.208v36.3h-66.358 v-36.3C360.203,24.317,335.888,0,305.998,0c-29.888,0-54.205,24.317-54.205,54.208v36.3h-66.356v-36.3 C185.439,24.317,161.121,0,131.233,0S77.029,24.317,77.029,54.208v36.3H22.67c-10.195,0-18.458,8.265-18.458,18.458V537.12 c0,41.29,33.59,74.88,74.881,74.88h453.814c41.29,0,74.881-33.59,74.881-74.88V108.966 C607.786,98.773,599.525,90.508,589.328,90.508z M570.87,207.023H41.128v-79.6H77.03v9.349c0,29.889,24.317,54.205,54.203,54.205 c29.888,0,54.206-24.317,54.206-54.205v-9.349h66.356v9.349c0,29.889,24.317,54.205,54.205,54.205 c29.889,0,54.205-24.317,54.205-54.205v-9.349h66.358v9.349c0,29.889,24.317,54.205,54.205,54.205 c29.889,0,54.205-24.317,54.205-54.205v-9.349h35.901v79.6H570.87z M463.476,54.208c0-9.535,7.754-17.292,17.289-17.292 c9.532,0,17.289,7.757,17.289,17.292v82.565c0,9.532-7.757,17.289-17.289,17.289c-9.535,0-17.289-7.757-17.289-17.289V54.208z M288.711,54.208c0-9.535,7.755-17.292,17.289-17.292c9.532,0,17.289,7.757,17.289,17.292v54.743c0,0.003,0,0.009,0,0.015 c0,0.003,0,0.009,0,0.015v27.791c0,9.532-7.757,17.289-17.289,17.289c-9.534,0-17.289-7.757-17.289-17.289V54.208z M113.944,54.208c0-9.535,7.755-17.292,17.289-17.292c9.535,0,17.29,7.757,17.29,17.292v54.728c0,0.009-0.002,0.018-0.002,0.029 c0,0.009,0.002,0.018,0.002,0.031v27.778c0,9.532-7.755,17.289-17.29,17.289c-9.532,0-17.287-7.757-17.287-17.289V54.208H113.944 z M570.87,537.119c0,20.933-17.03,37.965-37.965,37.965H79.091c-20.933,0-37.965-17.03-37.965-37.965V243.936H570.87V537.119z");
				setAttribute(path_1, "d", "M95.486,334.921h421.026c10.193,0,18.458-8.264,18.458-18.458s-8.265-18.458-18.458-18.458H95.486 c-10.195,0-18.458,8.265-18.458,18.458S85.292,334.921,95.486,334.921z");
				setAttribute(path_2, "d", "M95.486,420.496h421.026c10.193,0,18.458-8.264,18.458-18.458c0-10.193-8.265-18.458-18.458-18.458H95.486 c-10.195,0-18.458,8.265-18.458,18.458C77.029,412.232,85.292,420.496,95.486,420.496z");
				setAttribute(path_3, "d", "M95.486,506.072h421.026c10.193,0,18.458-8.264,18.458-18.458c0-10.193-8.265-18.458-18.458-18.458H95.486 c-10.195,0-18.458,8.264-18.458,18.458C77.029,497.807,85.292,506.072,95.486,506.072z");
				setAttribute(svg, "viewBox", "0 0 612 612");
				setAttribute(svg, "fill", "CurrentColor");
				setAttribute(svg, "stroke", "none");
			},

			m: function mount(target, anchor) {
				insertNode(svg, target, anchor);
				appendNode(path, svg);
				appendNode(path_1, svg);
				appendNode(path_2, svg);
				appendNode(path_3, svg);
			},

			p: noop,

			u: function unmount() {
				detachNode(svg);
			},

			d: noop
		};
	}

	function SVG_Agenda(options) {
		this._debugName = '<SVG_Agenda>';
		if (!options || (!options.target && !options.root)) throw new Error("'target' is a required option");
		init(this, options);
		this._state = assign({}, options.data);

		this._fragment = create_main_fragment$3(this, this._state);

		if (options.target) {
			if (options.hydrate) throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
			this._fragment.c();
			this._mount(options.target, options.anchor);
		}
	}

	assign(SVG_Agenda.prototype, protoDev);

	SVG_Agenda.prototype._checkReadOnly = function _checkReadOnly(newState) {
	};

	/* src/Icons/SVG_Clipboard.html generated by Svelte v2.4.4 */

	function create_main_fragment$4(component, ctx) {
		var svg, path, circle, path_1, circle_1, path_2, circle_2, path_3;

		return {
			c: function create() {
				svg = createSvgElement("svg");
				path = createSvgElement("path");
				circle = createSvgElement("circle");
				path_1 = createSvgElement("path");
				circle_1 = createSvgElement("circle");
				path_2 = createSvgElement("path");
				circle_2 = createSvgElement("circle");
				path_3 = createSvgElement("path");
				setAttribute(path, "d", "M422.957,33.391h-52.959C363.106,13.959,344.548,0,322.783,0H189.217c-21.766,0-40.323,13.959-47.215,33.391H89.044 c-27.618,0-50.087,22.469-50.087,50.087v378.435c0,27.618,22.469,50.087,50.087,50.087h333.913 c27.618,0,50.087-22.469,50.087-50.087V83.478C473.043,55.86,450.574,33.391,422.957,33.391z M172.522,50.087 c0-9.206,7.49-16.696,16.696-16.696h133.565c9.206,0,16.696,7.49,16.696,16.696v16.696H172.522V50.087z M439.652,461.913 c0,9.206-7.49,16.696-16.696,16.696H89.044c-9.206,0-16.696-7.49-16.696-16.696V83.478c0-9.206,7.49-16.696,16.696-16.696h50.087 v16.696c0,9.22,7.475,16.696,16.696,16.696h200.348c9.22,0,16.696-7.475,16.696-16.696V66.783h50.087 c9.206,0,16.696,7.49,16.696,16.696V461.913z");
				setAttribute(circle, "cx", "122.435");
				setAttribute(circle, "cy", "183.652");
				setAttribute(circle, "r", "16.696");
				setAttribute(path_1, "d", "M389.565,166.957H189.217c-9.22,0-16.696,7.475-16.696,16.696c0,9.22,7.475,16.696,16.696,16.696h200.348 c9.22,0,16.696-7.475,16.696-16.696C406.261,174.432,398.786,166.957,389.565,166.957z");
				setAttribute(circle_1, "cx", "122.435");
				setAttribute(circle_1, "cy", "283.826");
				setAttribute(circle_1, "r", "16.696");
				setAttribute(path_2, "d", "M389.565,267.13H189.217c-9.22,0-16.696,7.475-16.696,16.696c0,9.22,7.475,16.696,16.696,16.696h200.348 c9.22,0,16.696-7.475,16.696-16.696C406.261,274.606,398.786,267.13,389.565,267.13z");
				setAttribute(circle_2, "cx", "122.435");
				setAttribute(circle_2, "cy", "384");
				setAttribute(circle_2, "r", "16.696");
				setAttribute(path_3, "d", "M389.565,367.304H189.217c-9.22,0-16.696,7.475-16.696,16.696s7.475,16.696,16.696,16.696h200.348 c9.22,0,16.696-7.475,16.696-16.696S398.786,367.304,389.565,367.304z");
				setAttribute(svg, "viewBox", "0 0 512 512");
				setAttribute(svg, "fill", "CurrentColor");
				setAttribute(svg, "stroke", "none");
			},

			m: function mount(target, anchor) {
				insertNode(svg, target, anchor);
				appendNode(path, svg);
				appendNode(circle, svg);
				appendNode(path_1, svg);
				appendNode(circle_1, svg);
				appendNode(path_2, svg);
				appendNode(circle_2, svg);
				appendNode(path_3, svg);
			},

			p: noop,

			u: function unmount() {
				detachNode(svg);
			},

			d: noop
		};
	}

	function SVG_Clipboard(options) {
		this._debugName = '<SVG_Clipboard>';
		if (!options || (!options.target && !options.root)) throw new Error("'target' is a required option");
		init(this, options);
		this._state = assign({}, options.data);

		this._fragment = create_main_fragment$4(this, this._state);

		if (options.target) {
			if (options.hydrate) throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
			this._fragment.c();
			this._mount(options.target, options.anchor);
		}
	}

	assign(SVG_Clipboard.prototype, protoDev);

	SVG_Clipboard.prototype._checkReadOnly = function _checkReadOnly(newState) {
	};

	/* src/Icons/SVG_Clip.html generated by Svelte v2.4.4 */

	function create_main_fragment$5(component, ctx) {
		var svg, path;

		return {
			c: function create() {
				svg = createSvgElement("svg");
				path = createSvgElement("path");
				setAttribute(path, "d", "M26.834,98.371c-6.574,0-12.727-2.789-17.17-7.232C1.055,82.53-1.345,67.5,10.725,55.43 c7.072-7.072,35.4-35.398,49.541-49.542c5.02-5.02,11.41-6.958,17.527-5.319C83.801,2.178,88.725,7.1,90.334,13.107 c1.639,6.121-0.299,12.509-5.318,17.529L37.639,78.014c-2.705,2.705-5.76,4.306-8.832,4.631c-3.041,0.32-5.945-0.659-7.977-2.69 c-3.686-3.685-4.211-10.621,1.916-16.745l33.278-33.28c1.367-1.367,3.582-1.367,4.949,0s1.367,3.583,0,4.949L27.696,68.158 c-2.877,2.876-3.141,5.622-1.916,6.847c0.537,0.537,1.352,0.779,2.291,0.678c1.441-0.152,3.082-1.083,4.619-2.62l47.377-47.376 c3.25-3.25,4.496-7.074,3.506-10.766c-0.975-3.637-3.953-6.615-7.59-7.59c-3.691-0.99-7.516,0.256-10.768,3.507 c-14.14,14.141-42.469,42.471-49.541,49.541c-9.23,9.23-7.02,19.85-1.061,25.809s16.578,8.171,25.811-1.06l49.541-49.542 c1.367-1.367,3.582-1.367,4.949,0s1.367,3.583,0,4.949L45.373,90.078C39.534,95.919,32.998,98.371,26.834,98.371z");
				setAttribute(svg, "viewBox", "0 0 98.371 98.371");
				setAttribute(svg, "stroke", "none");
				setAttribute(svg, "fill", "CurrentColor");
			},

			m: function mount(target, anchor) {
				insertNode(svg, target, anchor);
				appendNode(path, svg);
			},

			p: noop,

			u: function unmount() {
				detachNode(svg);
			},

			d: noop
		};
	}

	function SVG_Clip(options) {
		this._debugName = '<SVG_Clip>';
		if (!options || (!options.target && !options.root)) throw new Error("'target' is a required option");
		init(this, options);
		this._state = assign({}, options.data);

		this._fragment = create_main_fragment$5(this, this._state);

		if (options.target) {
			if (options.hydrate) throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
			this._fragment.c();
			this._mount(options.target, options.anchor);
		}
	}

	assign(SVG_Clip.prototype, protoDev);

	SVG_Clip.prototype._checkReadOnly = function _checkReadOnly(newState) {
	};

	/* src/Icons/SVG_UserAdd.html generated by Svelte v2.4.4 */

	function create_main_fragment$6(component, ctx) {
		var svg, path, polygon;

		return {
			c: function create() {
				svg = createSvgElement("svg");
				path = createSvgElement("path");
				polygon = createSvgElement("polygon");
				setAttribute(path, "d", "M255.501,0.499c-81.448,0-147.711,66.264-147.711,147.711c0,50.449,25.429,95.065,64.137,121.724 c-36.139,12.471-69.263,33.071-97.091,60.899C26.577,379.093,0,443.254,0,511.501h39.922 c0-118.871,96.708-215.579,215.579-215.579c81.448,0,147.711-66.264,147.711-147.712S336.949,0.499,255.501,0.499z M255.501,256 c-59.435,0-107.789-48.354-107.789-107.789S196.066,40.421,255.501,40.421S363.29,88.775,363.29,148.211S314.936,256,255.501,256z");
				setAttribute(polygon, "points", "428.164,387.743 428.164,303.906 388.242,303.906 388.242,387.743 304.405,387.743 304.405,427.665 388.242,427.665 388.242,511.501 428.164,511.501 428.164,427.665 512,427.665 512,387.743 \t\t");
				setAttribute(svg, "viewBox", "0 0 512 512");
				setAttribute(svg, "stroke", "none");
				setAttribute(svg, "fill", "CurrentColor");
			},

			m: function mount(target, anchor) {
				insertNode(svg, target, anchor);
				appendNode(path, svg);
				appendNode(polygon, svg);
			},

			p: noop,

			u: function unmount() {
				detachNode(svg);
			},

			d: noop
		};
	}

	function SVG_UserAdd(options) {
		this._debugName = '<SVG_UserAdd>';
		if (!options || (!options.target && !options.root)) throw new Error("'target' is a required option");
		init(this, options);
		this._state = assign({}, options.data);

		this._fragment = create_main_fragment$6(this, this._state);

		if (options.target) {
			if (options.hydrate) throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
			this._fragment.c();
			this._mount(options.target, options.anchor);
		}
	}

	assign(SVG_UserAdd.prototype, protoDev);

	SVG_UserAdd.prototype._checkReadOnly = function _checkReadOnly(newState) {
	};

	/* src/Icons/SVG_Camera.html generated by Svelte v2.4.4 */

	function create_main_fragment$7(component, ctx) {
		var svg, path, path_1, circle;

		return {
			c: function create() {
				svg = createSvgElement("svg");
				path = createSvgElement("path");
				path_1 = createSvgElement("path");
				circle = createSvgElement("circle");
				setAttribute(path, "d", "M406.8,96.4c-8.4-8.8-20-14-33.2-14h-66.4v-0.8c0-10-4-19.6-10.8-26c-6.8-6.8-16-10.8-26-10.8h-120 c-10.4,0-19.6,4-26.4,10.8c-6.8,6.8-10.8,16-10.8,26v0.8h-66c-13.2,0-24.8,5.2-33.2,14c-8.4,8.4-14,20.4-14,33.2v199.2 C0,342,5.2,353.6,14,362c8.4,8.4,20.4,14,33.2,14h326.4c13.2,0,24.8-5.2,33.2-14c8.4-8.4,14-20.4,14-33.2V129.6 C420.8,116.4,415.6,104.8,406.8,96.4z M400,328.8h-0.4c0,7.2-2.8,13.6-7.6,18.4s-11.2,7.6-18.4,7.6H47.2 c-7.2,0-13.6-2.8-18.4-7.6c-4.8-4.8-7.6-11.2-7.6-18.4V129.6c0-7.2,2.8-13.6,7.6-18.4s11.2-7.6,18.4-7.6h77.2 c6,0,10.8-4.8,10.8-10.8V81.2c0-4.4,1.6-8.4,4.4-11.2s6.8-4.4,11.2-4.4h119.6c4.4,0,8.4,1.6,11.2,4.4c2.8,2.8,4.4,6.8,4.4,11.2 v11.6c0,6,4.8,10.8,10.8,10.8H374c7.2,0,13.6,2.8,18.4,7.6s7.6,11.2,7.6,18.4V328.8z");
				setAttribute(path_1, "d", "M210.4,130.8c-27.2,0-52,11.2-69.6,28.8c-18,18-28.8,42.4-28.8,69.6s11.2,52,28.8,69.6c18,18,42.4,28.8,69.6,28.8 s52-11.2,69.6-28.8c18-18,28.8-42.4,28.8-69.6s-11.2-52-28.8-69.6C262.4,142,237.6,130.8,210.4,130.8z M264.8,284 c-14,13.6-33.2,22.4-54.4,22.4S170,297.6,156,284c-14-14-22.4-33.2-22.4-54.4c0-21.2,8.8-40.4,22.4-54.4 c14-14,33.2-22.4,54.4-22.4s40.4,8.8,54.4,22.4c14,14,22.4,33.2,22.4,54.4C287.6,250.8,278.8,270,264.8,284z");
				setAttribute(circle, "cx", "352.8");
				setAttribute(circle, "cy", "150");
				setAttribute(circle, "r", "19.6");
				setAttribute(svg, "viewBox", "0 0 420.8 420.8");
				setAttribute(svg, "stroke", "none");
				setAttribute(svg, "fill", "CurrentColor");
			},

			m: function mount(target, anchor) {
				insertNode(svg, target, anchor);
				appendNode(path, svg);
				appendNode(path_1, svg);
				appendNode(circle, svg);
			},

			p: noop,

			u: function unmount() {
				detachNode(svg);
			},

			d: noop
		};
	}

	function SVG_Camera(options) {
		this._debugName = '<SVG_Camera>';
		if (!options || (!options.target && !options.root)) throw new Error("'target' is a required option");
		init(this, options);
		this._state = assign({}, options.data);

		this._fragment = create_main_fragment$7(this, this._state);

		if (options.target) {
			if (options.hydrate) throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
			this._fragment.c();
			this._mount(options.target, options.anchor);
		}
	}

	assign(SVG_Camera.prototype, protoDev);

	SVG_Camera.prototype._checkReadOnly = function _checkReadOnly(newState) {
	};

	/* src/Icons/SVG_Star.html generated by Svelte v2.4.4 */

	function create_main_fragment$8(component, ctx) {
		var svg, polygon;

		return {
			c: function create() {
				svg = createSvgElement("svg");
				polygon = createSvgElement("polygon");
				setAttribute(polygon, "stroke", "currentColor");
				setAttribute(polygon, "fill", "none");
				setAttribute(polygon, "points", "26.934,1.318 35.256,18.182 53.867,20.887 40.4,34.013 43.579,52.549 26.934,43.798 10.288,52.549 13.467,34.013 0,20.887 18.611,18.182 ");
				setAttribute(svg, "viewBox", "-3 -2 60 58");
				setAttribute(svg, "stroke-width", "5");
			},

			m: function mount(target, anchor) {
				insertNode(svg, target, anchor);
				appendNode(polygon, svg);
			},

			p: noop,

			u: function unmount() {
				detachNode(svg);
			},

			d: noop
		};
	}

	function SVG_Star(options) {
		this._debugName = '<SVG_Star>';
		if (!options || (!options.target && !options.root)) throw new Error("'target' is a required option");
		init(this, options);
		this._state = assign({}, options.data);

		this._fragment = create_main_fragment$8(this, this._state);

		if (options.target) {
			if (options.hydrate) throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
			this._fragment.c();
			this._mount(options.target, options.anchor);
		}
	}

	assign(SVG_Star.prototype, protoDev);

	SVG_Star.prototype._checkReadOnly = function _checkReadOnly(newState) {
	};

	/* src/IconsSvg.html generated by Svelte v2.4.4 */

	var icons = {
		Search: SVG_Search,
		Edit: SVG_Edit,
		Message: SVG_Message,
		Agenda: SVG_Agenda,
		Clipboard: SVG_Clipboard,
		Clip: SVG_Clip,
		UserAdd: SVG_UserAdd,
		Camera: SVG_Camera,
		Star: SVG_Star
	};

	function data() {
		return {
			svg: ''
		}
	}
	function oncreate() {
		this.set({svg: icons[this.get().name]});
	}
	function create_main_fragment$9(component, ctx) {
		var switch_instance_anchor;

		var switch_value = ctx.svg;

		function switch_props(ctx) {
			return {
				root: component.root
			};
		}

		if (switch_value) {
			var switch_instance = new switch_value(switch_props(ctx));
		}

		return {
			c: function create() {
				switch_instance_anchor = createComment();
				if (switch_instance) switch_instance._fragment.c();
			},

			m: function mount(target, anchor) {
				insertNode(switch_instance_anchor, target, anchor);

				if (switch_instance) {
					switch_instance._mount(target, anchor);
				}
			},

			p: function update(changed, ctx) {
				if (switch_value !== (switch_value = ctx.svg)) {
					if (switch_instance) switch_instance.destroy();

					if (switch_value) {
						switch_instance = new switch_value(switch_props(ctx));
						switch_instance._fragment.c();
						switch_instance._mount(switch_instance_anchor.parentNode, switch_instance_anchor);
					}
				}
			},

			u: function unmount() {
				detachNode(switch_instance_anchor);
				if (switch_instance) switch_instance._unmount();
			},

			d: function destroy$$1() {
				if (switch_instance) switch_instance.destroy(false);
			}
		};
	}

	function IconsSvg(options) {
		this._debugName = '<IconsSvg>';
		if (!options || (!options.target && !options.root)) throw new Error("'target' is a required option");
		init(this, options);
		this._state = assign(data(), options.data);
		if (!('svg' in this._state)) console.warn("<IconsSvg> was created without expected data property 'svg'");

		if (!options.root) {
			this._oncreate = [];
			this._beforecreate = [];
			this._aftercreate = [];
		}

		this._fragment = create_main_fragment$9(this, this._state);

		this.root._oncreate.push(() => {
			oncreate.call(this);
			this.fire("update", { changed: assignTrue({}, this._state), current: this._state });
		});

		if (options.target) {
			if (options.hydrate) throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
			this._fragment.c();
			this._mount(options.target, options.anchor);

			this._lock = true;
			callAll(this._beforecreate);
			callAll(this._oncreate);
			callAll(this._aftercreate);
			this._lock = false;
		}
	}

	assign(IconsSvg.prototype, protoDev);

	IconsSvg.prototype._checkReadOnly = function _checkReadOnly(newState) {
	};

	/* src/MenuItemIcon.html generated by Svelte v2.4.4 */



	function create_main_fragment$10(component, ctx) {
		var a, a_class_value, a_href_value;

		function select_block_type(ctx) {
			if (ctx.item.icon.svg) return create_if_block;
			if (ctx.item.icon.img) return create_if_block_1;
			return create_if_block_2;
		}

		var current_block_type = select_block_type(ctx);
		var if_block = current_block_type(component, ctx);

		return {
			c: function create() {
				a = createElement("a");
				if_block.c();
				a.className = a_class_value = "menu-item " + (ctx.item.active ? 'active' : '') + " svelte-14homif";
				a.href = a_href_value = ctx.item.link;
			},

			m: function mount(target, anchor) {
				insertNode(a, target, anchor);
				if_block.m(a, null);
			},

			p: function update(changed, ctx) {
				if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
					if_block.p(changed, ctx);
				} else {
					if_block.u();
					if_block.d();
					if_block = current_block_type(component, ctx);
					if_block.c();
					if_block.m(a, null);
				}

				if ((changed.item) && a_class_value !== (a_class_value = "menu-item " + (ctx.item.active ? 'active' : '') + " svelte-14homif")) {
					a.className = a_class_value;
				}

				if ((changed.item) && a_href_value !== (a_href_value = ctx.item.link)) {
					a.href = a_href_value;
				}
			},

			u: function unmount() {
				detachNode(a);
				if_block.u();
			},

			d: function destroy$$1() {
				if_block.d();
			}
		};
	}

	// (2:2) {#if item.icon.svg}
	function create_if_block(component, ctx) {
		var span;

		var iconssvg_initial_data = { name: ctx.item.icon.svg };
		var iconssvg = new IconsSvg({
			root: component.root,
			data: iconssvg_initial_data
		});

		return {
			c: function create() {
				span = createElement("span");
				iconssvg._fragment.c();
				span.className = "icon svelte-14homif";
			},

			m: function mount(target, anchor) {
				insertNode(span, target, anchor);
				iconssvg._mount(span, null);
			},

			p: function update(changed, ctx) {
				var iconssvg_changes = {};
				if (changed.item) iconssvg_changes.name = ctx.item.icon.svg;
				iconssvg._set(iconssvg_changes);
			},

			u: function unmount() {
				detachNode(span);
			},

			d: function destroy$$1() {
				iconssvg.destroy(false);
			}
		};
	}

	// (6:25) 
	function create_if_block_1(component, ctx) {
		var span, img, img_src_value, img_alt_value;

		return {
			c: function create() {
				span = createElement("span");
				img = createElement("img");
				img.src = img_src_value = ctx.item.icon.img;
				img.alt = img_alt_value = ctx.item.icon.name;
				span.className = "icon svelte-14homif";
			},

			m: function mount(target, anchor) {
				insertNode(span, target, anchor);
				appendNode(img, span);
			},

			p: function update(changed, ctx) {
				if ((changed.item) && img_src_value !== (img_src_value = ctx.item.icon.img)) {
					img.src = img_src_value;
				}

				if ((changed.item) && img_alt_value !== (img_alt_value = ctx.item.icon.name)) {
					img.alt = img_alt_value;
				}
			},

			u: function unmount() {
				detachNode(span);
			},

			d: noop
		};
	}

	// (10:2) {:else}
	function create_if_block_2(component, ctx) {
		var text_value = ctx.item.icon.name, text;

		return {
			c: function create() {
				text = createText(text_value);
			},

			m: function mount(target, anchor) {
				insertNode(text, target, anchor);
			},

			p: function update(changed, ctx) {
				if ((changed.item) && text_value !== (text_value = ctx.item.icon.name)) {
					text.data = text_value;
				}
			},

			u: function unmount() {
				detachNode(text);
			},

			d: noop
		};
	}

	function MenuItemIcon(options) {
		this._debugName = '<MenuItemIcon>';
		if (!options || (!options.target && !options.root)) throw new Error("'target' is a required option");
		init(this, options);
		this._state = assign({}, options.data);
		if (!('item' in this._state)) console.warn("<MenuItemIcon> was created without expected data property 'item'");

		if (!options.root) {
			this._oncreate = [];
			this._beforecreate = [];
			this._aftercreate = [];
		}

		this._fragment = create_main_fragment$10(this, this._state);

		if (options.target) {
			if (options.hydrate) throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
			this._fragment.c();
			this._mount(options.target, options.anchor);

			this._lock = true;
			callAll(this._beforecreate);
			callAll(this._oncreate);
			callAll(this._aftercreate);
			this._lock = false;
		}
	}

	assign(MenuItemIcon.prototype, protoDev);

	MenuItemIcon.prototype._checkReadOnly = function _checkReadOnly(newState) {
	};

	/* src/SideNav.html generated by Svelte v2.4.4 */



	function create_main_fragment$11(component, ctx) {
		var nav, a, img, img_src_value, a_href_value, text_1, ul, text_2, div, a_1, img_1, img_1_src_value, a_1_href_value;

		var each_value = ctx.menu;

		var each_blocks = [];

		for (var i = 0; i < each_value.length; i += 1) {
			each_blocks[i] = create_each_block(component, get_each_context(ctx, each_value, i));
		}

		return {
			c: function create() {
				nav = createElement("nav");
				a = createElement("a");
				img = createElement("img");
				text_1 = createText("\n\t");
				ul = createElement("ul");

				for (var i = 0; i < each_blocks.length; i += 1) {
					each_blocks[i].c();
				}

				text_2 = createText("\n\t");
				div = createElement("div");
				a_1 = createElement("a");
				img_1 = createElement("img");
				img.className = "img svelte-bcg552";
				img.src = img_src_value = ctx.brand.img;
				img.alt = "Brand";
				a.className = "brand svelte-bcg552";
				a.href = a_href_value = ctx.brand.link;
				ul.className = "menu svelte-bcg552";
				img_1.className = "img svelte-bcg552";
				img_1.src = img_1_src_value = ctx.user.img;
				img_1.alt = "User Settings";
				a_1.href = a_1_href_value = ctx.user.link;
				div.className = "user-menu bottom svelte-bcg552";
				nav.className = "sidenav svelte-bcg552";
			},

			m: function mount(target, anchor) {
				insertNode(nav, target, anchor);
				appendNode(a, nav);
				appendNode(img, a);
				appendNode(text_1, nav);
				appendNode(ul, nav);

				for (var i = 0; i < each_blocks.length; i += 1) {
					each_blocks[i].m(ul, null);
				}

				appendNode(text_2, nav);
				appendNode(div, nav);
				appendNode(a_1, div);
				appendNode(img_1, a_1);
			},

			p: function update(changed, ctx) {
				if ((changed.brand) && img_src_value !== (img_src_value = ctx.brand.img)) {
					img.src = img_src_value;
				}

				if ((changed.brand) && a_href_value !== (a_href_value = ctx.brand.link)) {
					a.href = a_href_value;
				}

				if (changed.menu) {
					each_value = ctx.menu;

					for (var i = 0; i < each_value.length; i += 1) {
						const child_ctx = get_each_context(ctx, each_value, i);

						if (each_blocks[i]) {
							each_blocks[i].p(changed, child_ctx);
						} else {
							each_blocks[i] = create_each_block(component, child_ctx);
							each_blocks[i].c();
							each_blocks[i].m(ul, null);
						}
					}

					for (; i < each_blocks.length; i += 1) {
						each_blocks[i].u();
						each_blocks[i].d();
					}
					each_blocks.length = each_value.length;
				}

				if ((changed.user) && img_1_src_value !== (img_1_src_value = ctx.user.img)) {
					img_1.src = img_1_src_value;
				}

				if ((changed.user) && a_1_href_value !== (a_1_href_value = ctx.user.link)) {
					a_1.href = a_1_href_value;
				}
			},

			u: function unmount() {
				detachNode(nav);

				for (var i = 0; i < each_blocks.length; i += 1) {
					each_blocks[i].u();
				}
			},

			d: function destroy$$1() {
				destroyEach(each_blocks);
			}
		};
	}

	// (6:2) {#each menu as item}
	function create_each_block(component, ctx) {
		var li;

		var menuitemicon_initial_data = { item: ctx.item };
		var menuitemicon = new MenuItemIcon({
			root: component.root,
			data: menuitemicon_initial_data
		});

		return {
			c: function create() {
				li = createElement("li");
				menuitemicon._fragment.c();
				setStyle(li, "--color", ctx.item.icon.color);
			},

			m: function mount(target, anchor) {
				insertNode(li, target, anchor);
				menuitemicon._mount(li, null);
			},

			p: function update(changed, ctx) {
				var menuitemicon_changes = {};
				if (changed.menu) menuitemicon_changes.item = ctx.item;
				menuitemicon._set(menuitemicon_changes);

				if (changed.menu) {
					setStyle(li, "--color", ctx.item.icon.color);
				}
			},

			u: function unmount() {
				detachNode(li);
			},

			d: function destroy$$1() {
				menuitemicon.destroy(false);
			}
		};
	}

	function get_each_context(ctx, list, i) {
		return assign(assign({}, ctx), {
			item: list[i],
			each_value: list,
			item_index: i
		});
	}

	function SideNav(options) {
		this._debugName = '<SideNav>';
		if (!options || (!options.target && !options.root)) throw new Error("'target' is a required option");
		init(this, options);
		this._state = assign({}, options.data);
		if (!('brand' in this._state)) console.warn("<SideNav> was created without expected data property 'brand'");
		if (!('menu' in this._state)) console.warn("<SideNav> was created without expected data property 'menu'");
		if (!('user' in this._state)) console.warn("<SideNav> was created without expected data property 'user'");

		if (!options.root) {
			this._oncreate = [];
			this._beforecreate = [];
			this._aftercreate = [];
		}

		this._fragment = create_main_fragment$11(this, this._state);

		if (options.target) {
			if (options.hydrate) throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
			this._fragment.c();
			this._mount(options.target, options.anchor);

			this._lock = true;
			callAll(this._beforecreate);
			callAll(this._oncreate);
			callAll(this._aftercreate);
			this._lock = false;
		}
	}

	assign(SideNav.prototype, protoDev);

	SideNav.prototype._checkReadOnly = function _checkReadOnly(newState) {
	};

	/* src/Banner.html generated by Svelte v2.4.4 */

	function create_main_fragment$12(component, ctx) {
		var div, img, img_src_value;

		return {
			c: function create() {
				div = createElement("div");
				img = createElement("img");
				img.src = img_src_value = ctx.banner.img;
				img.alt = "banner";
				setStyle(img, "width", "" + ctx.banner.width + "%");
				setStyle(img, "top", "" + ctx.banner.top + "%");
				setStyle(img, "left", "" + ctx.banner.left + "%");
				img.className = "svelte-n1ubcn";
				div.className = "banner svelte-n1ubcn";
			},

			m: function mount(target, anchor) {
				insertNode(div, target, anchor);
				appendNode(img, div);
			},

			p: function update(changed, ctx) {
				if ((changed.banner) && img_src_value !== (img_src_value = ctx.banner.img)) {
					img.src = img_src_value;
				}

				if (changed.banner) {
					setStyle(img, "width", "" + ctx.banner.width + "%");
					setStyle(img, "top", "" + ctx.banner.top + "%");
					setStyle(img, "left", "" + ctx.banner.left + "%");
				}
			},

			u: function unmount() {
				detachNode(div);
			},

			d: noop
		};
	}

	function Banner(options) {
		this._debugName = '<Banner>';
		if (!options || (!options.target && !options.root)) throw new Error("'target' is a required option");
		init(this, options);
		this._state = assign({}, options.data);
		if (!('banner' in this._state)) console.warn("<Banner> was created without expected data property 'banner'");

		this._fragment = create_main_fragment$12(this, this._state);

		if (options.target) {
			if (options.hydrate) throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
			this._fragment.c();
			this._mount(options.target, options.anchor);
		}
	}

	assign(Banner.prototype, protoDev);

	Banner.prototype._checkReadOnly = function _checkReadOnly(newState) {
	};

	/* src/Sidebar.html generated by Svelte v2.4.4 */

	function create_main_fragment$13(component, ctx) {
		var aside, slot_content_default = component._slotted.default;

		return {
			c: function create() {
				aside = createElement("aside");
				aside.className = "sidebar svelte-rjl163";
			},

			m: function mount(target, anchor) {
				insertNode(aside, target, anchor);

				if (slot_content_default) {
					appendNode(slot_content_default, aside);
				}
			},

			p: noop,

			u: function unmount() {
				detachNode(aside);

				if (slot_content_default) {
					reinsertChildren(aside, slot_content_default);
				}
			},

			d: noop
		};
	}

	function Sidebar(options) {
		this._debugName = '<Sidebar>';
		if (!options || (!options.target && !options.root)) throw new Error("'target' is a required option");
		init(this, options);
		this._state = assign({}, options.data);

		this._slotted = options.slots || {};

		this.slots = {};

		this._fragment = create_main_fragment$13(this, this._state);

		if (options.target) {
			if (options.hydrate) throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
			this._fragment.c();
			this._mount(options.target, options.anchor);
		}
	}

	assign(Sidebar.prototype, protoDev);

	Sidebar.prototype._checkReadOnly = function _checkReadOnly(newState) {
	};

	/* src/Tiles.html generated by Svelte v2.4.4 */

	function create_main_fragment$14(component, ctx) {
		var div;

		var each_value = ctx.tiles;

		var each_blocks = [];

		for (var i = 0; i < each_value.length; i += 1) {
			each_blocks[i] = create_each_block$1(component, get_each_context$1(ctx, each_value, i));
		}

		return {
			c: function create() {
				div = createElement("div");

				for (var i = 0; i < each_blocks.length; i += 1) {
					each_blocks[i].c();
				}
				div.className = "tiles svelte-1p0pifj";
			},

			m: function mount(target, anchor) {
				insertNode(div, target, anchor);

				for (var i = 0; i < each_blocks.length; i += 1) {
					each_blocks[i].m(div, null);
				}
			},

			p: function update(changed, ctx) {
				if (changed.tiles) {
					each_value = ctx.tiles;

					for (var i = 0; i < each_value.length; i += 1) {
						const child_ctx = get_each_context$1(ctx, each_value, i);

						if (each_blocks[i]) {
							each_blocks[i].p(changed, child_ctx);
						} else {
							each_blocks[i] = create_each_block$1(component, child_ctx);
							each_blocks[i].c();
							each_blocks[i].m(div, null);
						}
					}

					for (; i < each_blocks.length; i += 1) {
						each_blocks[i].u();
						each_blocks[i].d();
					}
					each_blocks.length = each_value.length;
				}
			},

			u: function unmount() {
				detachNode(div);

				for (var i = 0; i < each_blocks.length; i += 1) {
					each_blocks[i].u();
				}
			},

			d: function destroy$$1() {
				destroyEach(each_blocks);
			}
		};
	}

	// (2:2) {#each tiles as tile, i}
	function create_each_block$1(component, ctx) {
		var if_block_anchor;

		var if_block = (ctx.i < 9) && create_if_block$1(component, ctx);

		return {
			c: function create() {
				if (if_block) if_block.c();
				if_block_anchor = createComment();
			},

			m: function mount(target, anchor) {
				if (if_block) if_block.m(target, anchor);
				insertNode(if_block_anchor, target, anchor);
			},

			p: function update(changed, ctx) {
				if (ctx.i < 9) {
					if (if_block) {
						if_block.p(changed, ctx);
					} else {
						if_block = create_if_block$1(component, ctx);
						if_block.c();
						if_block.m(if_block_anchor.parentNode, if_block_anchor);
					}
				} else if (if_block) {
					if_block.u();
					if_block.d();
					if_block = null;
				}
			},

			u: function unmount() {
				if (if_block) if_block.u();
				detachNode(if_block_anchor);
			},

			d: function destroy$$1() {
				if (if_block) if_block.d();
			}
		};
	}

	// (3:4) {#if i < 9}
	function create_if_block$1(component, ctx) {
		var a, a_href_value, a_title_value;

		return {
			c: function create() {
				a = createElement("a");
				a.className = "tile svelte-1p0pifj";
				a.href = a_href_value = ctx.tile.link;
				a.title = a_title_value = ctx.tile.title;
				setStyle(a, "background-image", "url('" + ctx.tile.img + "')");
			},

			m: function mount(target, anchor) {
				insertNode(a, target, anchor);
			},

			p: function update(changed, ctx) {
				if ((changed.tiles) && a_href_value !== (a_href_value = ctx.tile.link)) {
					a.href = a_href_value;
				}

				if ((changed.tiles) && a_title_value !== (a_title_value = ctx.tile.title)) {
					a.title = a_title_value;
				}

				if (changed.tiles) {
					setStyle(a, "background-image", "url('" + ctx.tile.img + "')");
				}
			},

			u: function unmount() {
				detachNode(a);
			},

			d: noop
		};
	}

	function get_each_context$1(ctx, list, i) {
		return assign(assign({}, ctx), {
			tile: list[i],
			each_value: list,
			i: i
		});
	}

	function Tiles(options) {
		this._debugName = '<Tiles>';
		if (!options || (!options.target && !options.root)) throw new Error("'target' is a required option");
		init(this, options);
		this._state = assign({}, options.data);
		if (!('tiles' in this._state)) console.warn("<Tiles> was created without expected data property 'tiles'");

		this._fragment = create_main_fragment$14(this, this._state);

		if (options.target) {
			if (options.hydrate) throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
			this._fragment.c();
			this._mount(options.target, options.anchor);
		}
	}

	assign(Tiles.prototype, protoDev);

	Tiles.prototype._checkReadOnly = function _checkReadOnly(newState) {
	};

	/* src/SidebarProfile.html generated by Svelte v2.4.4 */



	function create_main_fragment$15(component, ctx) {
		var slot_content_default = component._slotted.default, slot_content_default_before, slot_content_default_after, header, img, img_src_value, text, button, span, text_1, text_2, div, div_1, h2, text_4, p, text_5_value = ctx.profile.followers, text_5, text_7, div_2, h2_1, text_9, p_1, text_10_value = ctx.profile.following, text_10, text_13, div_3, h2_2, text_15, p_2, text_16_value = ctx.profile.perf, text_16, text_17, span_1, text_18, text_19_value = ctx.profile.reviews, text_19, text_20, text_23, main, h2_3, span_2, text_24, text_25, text_26, h2_4, span_3, text_27, a, text_29, div_4;

		var iconssvg_initial_data = { name: "UserAdd" };
		var iconssvg = new IconsSvg({
			root: component.root,
			data: iconssvg_initial_data
		});

		var iconssvg_1_initial_data = { name: "Camera" };
		var iconssvg_1 = new IconsSvg({
			root: component.root,
			data: iconssvg_1_initial_data
		});

		var tiles_initial_data = { tiles: ctx.profile.projects };
		var tiles = new Tiles({
			root: component.root,
			data: tiles_initial_data
		});

		var iconssvg_2_initial_data = { name: "Star" };
		var iconssvg_2 = new IconsSvg({
			root: component.root,
			data: iconssvg_2_initial_data
		});

		return {
			c: function create() {
				if (!slot_content_default) {
					header = createElement("header");
					img = createElement("img");
					text = createText("\n\t\t");
					button = createElement("button");
					span = createElement("span");
					iconssvg._fragment.c();
					text_1 = createText("\n\t\t\tFollow");
					text_2 = createText("\n\t\t");
					div = createElement("div");
					div_1 = createElement("div");
					h2 = createElement("h2");
					h2.textContent = "Follower";
					text_4 = createText("\n\t\t\t\t");
					p = createElement("p");
					text_5 = createText(text_5_value);
					text_7 = createText("\n\t\t\t");
					div_2 = createElement("div");
					h2_1 = createElement("h2");
					h2_1.textContent = "Folowing";
					text_9 = createText("\n\t\t\t\t");
					p_1 = createElement("p");
					text_10 = createText(text_10_value);
					text_13 = createText("\n\t\t");
					div_3 = createElement("div");
					h2_2 = createElement("h2");
					h2_2.textContent = "Performance";
					text_15 = createText("\n\t\t\t");
					p_2 = createElement("p");
					text_16 = createText(text_16_value);
					text_17 = createText(" ");
					span_1 = createElement("span");
					text_18 = createText("and ");
					text_19 = createText(text_19_value);
					text_20 = createText(" reviews");
					text_23 = createText("\n\n\t");
					main = createElement("main");
					h2_3 = createElement("h2");
					span_2 = createElement("span");
					iconssvg_1._fragment.c();
					text_24 = createText(" Projects");
					text_25 = createText("\n\t\t\t");
					tiles._fragment.c();
					text_26 = createText("\n\t\t");
					h2_4 = createElement("h2");
					span_3 = createElement("span");
					iconssvg_2._fragment.c();
					text_27 = createText(" Boosts ");
					a = createElement("a");
					a.textContent = "More";
					text_29 = createText("\n\t\t");
					div_4 = createElement("div");
				}
				if (!slot_content_default) {
					img.className = "profile-img img svelte-1gvdoqf";
					img.src = img_src_value = ctx.profile.img;
					img.alt = "Profile Image";
					span.className = "icon svelte-1gvdoqf";
					button.className = "btn svelte-1gvdoqf";
					h2.className = "title";
					p.className = "highlight info svelte-1gvdoqf";
					div_1.className = "col";
					h2_1.className = "title";
					p_1.className = "highlight info svelte-1gvdoqf";
					div_2.className = "col";
					div.className = "info-row lg row svelte-1gvdoqf";
					h2_2.className = "title";
					span_1.className = "note svelte-1gvdoqf";
					p_2.className = "highlight info svelte-1gvdoqf";
					div_3.className = "col info-row svelte-1gvdoqf";
					header.className = "svelte-1gvdoqf";
					span_2.className = "icon svelte-1gvdoqf";
					h2_3.className = "title svelte-1gvdoqf";
					span_3.className = "icon icon-star svelte-1gvdoqf";
					a.className = "right link";
					a.href = "/";
					h2_4.className = "title svelte-1gvdoqf";
					div_4.className = "rows";
					main.className = "svelte-1gvdoqf";
				}
			},

			m: function mount(target, anchor) {
				if (!slot_content_default) {
					insertNode(header, target, anchor);
					appendNode(img, header);
					appendNode(text, header);
					appendNode(button, header);
					appendNode(span, button);
					iconssvg._mount(span, null);
					appendNode(text_1, button);
					appendNode(text_2, header);
					appendNode(div, header);
					appendNode(div_1, div);
					appendNode(h2, div_1);
					appendNode(text_4, div_1);
					appendNode(p, div_1);
					appendNode(text_5, p);
					appendNode(text_7, div);
					appendNode(div_2, div);
					appendNode(h2_1, div_2);
					appendNode(text_9, div_2);
					appendNode(p_1, div_2);
					appendNode(text_10, p_1);
					appendNode(text_13, header);
					appendNode(div_3, header);
					appendNode(h2_2, div_3);
					appendNode(text_15, div_3);
					appendNode(p_2, div_3);
					appendNode(text_16, p_2);
					appendNode(text_17, p_2);
					appendNode(span_1, p_2);
					appendNode(text_18, span_1);
					appendNode(text_19, span_1);
					appendNode(text_20, span_1);
					insertNode(text_23, target, anchor);
					insertNode(main, target, anchor);
					appendNode(h2_3, main);
					appendNode(span_2, h2_3);
					iconssvg_1._mount(span_2, null);
					appendNode(text_24, h2_3);
					appendNode(text_25, main);
					tiles._mount(main, null);
					appendNode(text_26, main);
					appendNode(h2_4, main);
					appendNode(span_3, h2_4);
					iconssvg_2._mount(span_3, null);
					appendNode(text_27, h2_4);
					appendNode(a, h2_4);
					appendNode(text_29, main);
					appendNode(div_4, main);
				}

				else {
					insertNode(slot_content_default_before || (slot_content_default_before = createComment()), target, anchor);
					insertNode(slot_content_default, target, anchor);
					insertNode(slot_content_default_after || (slot_content_default_after = createComment()), target, anchor);
				}
			},

			p: function update(changed, ctx) {
				if (!slot_content_default) {
					if ((changed.profile) && img_src_value !== (img_src_value = ctx.profile.img)) {
						img.src = img_src_value;
					}

					if ((changed.profile) && text_5_value !== (text_5_value = ctx.profile.followers)) {
						text_5.data = text_5_value;
					}

					if ((changed.profile) && text_10_value !== (text_10_value = ctx.profile.following)) {
						text_10.data = text_10_value;
					}

					if ((changed.profile) && text_16_value !== (text_16_value = ctx.profile.perf)) {
						text_16.data = text_16_value;
					}

					if ((changed.profile) && text_19_value !== (text_19_value = ctx.profile.reviews)) {
						text_19.data = text_19_value;
					}

						var tiles_changes = {};
					if (changed.profile) tiles_changes.tiles = ctx.profile.projects;
					tiles._set(tiles_changes);

				}
			},

			u: function unmount() {
				if (!slot_content_default) {
					detachNode(header);
					detachNode(text_23);
					detachNode(main);
				}

				else {
					reinsertBetween(slot_content_default_before, slot_content_default_after, slot_content_default);
					detachNode(slot_content_default_before);
					detachNode(slot_content_default_after);
				}
			},

			d: function destroy$$1() {
				if (!slot_content_default) {
					iconssvg.destroy(false);
					iconssvg_1.destroy(false);
					tiles.destroy(false);
					iconssvg_2.destroy(false);
				}
			}
		};
	}

	function SidebarProfile(options) {
		this._debugName = '<SidebarProfile>';
		if (!options || (!options.target && !options.root)) throw new Error("'target' is a required option");
		init(this, options);
		this._state = assign({}, options.data);
		if (!('profile' in this._state)) console.warn("<SidebarProfile> was created without expected data property 'profile'");

		this._slotted = options.slots || {};

		if (!options.root) {
			this._oncreate = [];
			this._beforecreate = [];
			this._aftercreate = [];
		}

		this.slots = {};

		this._fragment = create_main_fragment$15(this, this._state);

		if (options.target) {
			if (options.hydrate) throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
			this._fragment.c();
			this._mount(options.target, options.anchor);

			this._lock = true;
			callAll(this._beforecreate);
			callAll(this._oncreate);
			callAll(this._aftercreate);
			this._lock = false;
		}
	}

	assign(SidebarProfile.prototype, protoDev);

	SidebarProfile.prototype._checkReadOnly = function _checkReadOnly(newState) {
	};

	/* src/HeaderProfile.html generated by Svelte v2.4.4 */

	function setStars(node) {
		var stars = this.get().profile.stars; stars = 3.5;
		for (var i=1; i<=stars; i++) {
			addStar('fullstar');
		}
		if (i-1 !== stars && i-1 < stars) {
			addStar('halfstar');
			i += 1;
		}
		for (i; i<6; i++) {
			addStar();
		}
		function addStar(klass) {
			var star = document.createElement('span');
			if (klass) star.classList.add(klass);
			node.append(star);
		}
	}
	function create_main_fragment$16(component, ctx) {
		var div, h1, text_value = ctx.profile.name, text, text_1, p, text_2_value = ctx.profile.title, text_2, text_3, span, setStars_action, text_5, div_1, button, span_1, text_6, button_1;

		var iconssvg_initial_data = { name: "Message" };
		var iconssvg = new IconsSvg({
			root: component.root,
			data: iconssvg_initial_data
		});

		return {
			c: function create() {
				div = createElement("div");
				h1 = createElement("h1");
				text = createText(text_value);
				text_1 = createText("\n\t");
				p = createElement("p");
				text_2 = createText(text_2_value);
				text_3 = createText(" ");
				span = createElement("span");
				text_5 = createText("\n");
				div_1 = createElement("div");
				button = createElement("button");
				span_1 = createElement("span");
				iconssvg._fragment.c();
				text_6 = createText("\n\t");
				button_1 = createElement("button");
				button_1.textContent = "Request";
				h1.className = "svelte-x355rh";
				span.className = "icon-stars svelte-x355rh";
				setStars_action = setStars.call(component, span) || {};
				p.className = "svelte-x355rh";
				span_1.className = "icon svelte-x355rh";
				button.className = "btn-icon svelte-x355rh";
				button_1.className = "btn-primary svelte-x355rh";
				div_1.className = "row";
			},

			m: function mount(target, anchor) {
				insertNode(div, target, anchor);
				appendNode(h1, div);
				appendNode(text, h1);
				appendNode(text_1, div);
				appendNode(p, div);
				appendNode(text_2, p);
				appendNode(text_3, p);
				appendNode(span, p);
				insertNode(text_5, target, anchor);
				insertNode(div_1, target, anchor);
				appendNode(button, div_1);
				appendNode(span_1, button);
				iconssvg._mount(span_1, null);
				appendNode(text_6, div_1);
				appendNode(button_1, div_1);
			},

			p: function update(changed, ctx) {
				if ((changed.profile) && text_value !== (text_value = ctx.profile.name)) {
					text.data = text_value;
				}

				if ((changed.profile) && text_2_value !== (text_2_value = ctx.profile.title)) {
					text_2.data = text_2_value;
				}
			},

			u: function unmount() {
				detachNode(div);
				detachNode(text_5);
				detachNode(div_1);
			},

			d: function destroy$$1() {
				if (typeof setStars_action.destroy === 'function') setStars_action.destroy.call(component);
				iconssvg.destroy(false);
			}
		};
	}

	function HeaderProfile(options) {
		this._debugName = '<HeaderProfile>';
		if (!options || (!options.target && !options.root)) throw new Error("'target' is a required option");
		init(this, options);
		this._state = assign({}, options.data);
		if (!('profile' in this._state)) console.warn("<HeaderProfile> was created without expected data property 'profile'");

		if (!options.root) {
			this._oncreate = [];
			this._beforecreate = [];
			this._aftercreate = [];
		}

		this._fragment = create_main_fragment$16(this, this._state);

		if (options.target) {
			if (options.hydrate) throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
			this._fragment.c();
			this._mount(options.target, options.anchor);

			this._lock = true;
			callAll(this._beforecreate);
			callAll(this._oncreate);
			callAll(this._aftercreate);
			this._lock = false;
		}
	}

	assign(HeaderProfile.prototype, protoDev);

	HeaderProfile.prototype._checkReadOnly = function _checkReadOnly(newState) {
	};

	/* src/ProfileInfo.html generated by Svelte v2.4.4 */

	function create_main_fragment$17(component, ctx) {
		var text;

		return {
			c: function create() {
				text = createText("Profile info");
			},

			m: function mount(target, anchor) {
				insertNode(text, target, anchor);
			},

			p: noop,

			u: function unmount() {
				detachNode(text);
			},

			d: noop
		};
	}

	function ProfileInfo(options) {
		this._debugName = '<ProfileInfo>';
		if (!options || (!options.target && !options.root)) throw new Error("'target' is a required option");
		init(this, options);
		this._state = assign({}, options.data);

		this._fragment = create_main_fragment$17(this, this._state);

		if (options.target) {
			if (options.hydrate) throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
			this._fragment.c();
			this._mount(options.target, options.anchor);
		}
	}

	assign(ProfileInfo.prototype, protoDev);

	ProfileInfo.prototype._checkReadOnly = function _checkReadOnly(newState) {
	};

	/* src/ProfileFeed.html generated by Svelte v2.4.4 */

	function create_main_fragment$18(component, ctx) {
		var text;

		return {
			c: function create() {
				text = createText("ProfileFeed");
			},

			m: function mount(target, anchor) {
				insertNode(text, target, anchor);
			},

			p: noop,

			u: function unmount() {
				detachNode(text);
			},

			d: noop
		};
	}

	function ProfileFeed(options) {
		this._debugName = '<ProfileFeed>';
		if (!options || (!options.target && !options.root)) throw new Error("'target' is a required option");
		init(this, options);
		this._state = assign({}, options.data);

		this._fragment = create_main_fragment$18(this, this._state);

		if (options.target) {
			if (options.hydrate) throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
			this._fragment.c();
			this._mount(options.target, options.anchor);
		}
	}

	assign(ProfileFeed.prototype, protoDev);

	ProfileFeed.prototype._checkReadOnly = function _checkReadOnly(newState) {
	};

	/* src/ProfileAgenda.html generated by Svelte v2.4.4 */

	function create_main_fragment$19(component, ctx) {
		var text;

		return {
			c: function create() {
				text = createText("Profile Agenda");
			},

			m: function mount(target, anchor) {
				insertNode(text, target, anchor);
			},

			p: noop,

			u: function unmount() {
				detachNode(text);
			},

			d: noop
		};
	}

	function ProfileAgenda(options) {
		this._debugName = '<ProfileAgenda>';
		if (!options || (!options.target && !options.root)) throw new Error("'target' is a required option");
		init(this, options);
		this._state = assign({}, options.data);

		this._fragment = create_main_fragment$19(this, this._state);

		if (options.target) {
			if (options.hydrate) throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
			this._fragment.c();
			this._mount(options.target, options.anchor);
		}
	}

	assign(ProfileAgenda.prototype, protoDev);

	ProfileAgenda.prototype._checkReadOnly = function _checkReadOnly(newState) {
	};

	/* src/ProfileResume.html generated by Svelte v2.4.4 */

	function create_main_fragment$20(component, ctx) {
		var text;

		return {
			c: function create() {
				text = createText("Profile Resume");
			},

			m: function mount(target, anchor) {
				insertNode(text, target, anchor);
			},

			p: noop,

			u: function unmount() {
				detachNode(text);
			},

			d: noop
		};
	}

	function ProfileResume(options) {
		this._debugName = '<ProfileResume>';
		if (!options || (!options.target && !options.root)) throw new Error("'target' is a required option");
		init(this, options);
		this._state = assign({}, options.data);

		this._fragment = create_main_fragment$20(this, this._state);

		if (options.target) {
			if (options.hydrate) throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
			this._fragment.c();
			this._mount(options.target, options.anchor);
		}
	}

	assign(ProfileResume.prototype, protoDev);

	ProfileResume.prototype._checkReadOnly = function _checkReadOnly(newState) {
	};

	/* src/ContentProfile.html generated by Svelte v2.4.4 */

	var components = {
	  ProfileInfo,
	  ProfileFeed,
	  ProfileAgenda,
	  ProfileResume
	};

	function data$1() {
	  return {
	    selected: ProfileFeed
	  }
	}
	var methods = {
	  toggleContent(i) {
	    var menu = this.get().menu;
	    var clicked = menu[i];
	    if (clicked.active) { return; }
	    var activeItem = menu.find(x => x.active === true);
	    activeItem.active = '';
	    clicked.active = true;
	    this.set({menu});
	    var selected = components[clicked.link];
	    if (selected) this.set({selected});
	  }
	};

	function create_main_fragment$21(component, ctx) {
		var nav, ul, text_1, div;

		var each_value = ctx.menu;

		var each_blocks = [];

		for (var i = 0; i < each_value.length; i += 1) {
			each_blocks[i] = create_each_block$2(component, get_each_context$2(ctx, each_value, i));
		}

		var switch_value = ctx.selected;

		function switch_props(ctx) {
			return {
				root: component.root
			};
		}

		if (switch_value) {
			var switch_instance = new switch_value(switch_props(ctx));
		}

		return {
			c: function create() {
				nav = createElement("nav");
				ul = createElement("ul");

				for (var i = 0; i < each_blocks.length; i += 1) {
					each_blocks[i].c();
				}

				text_1 = createText("\n\n");
				div = createElement("div");
				if (switch_instance) switch_instance._fragment.c();
				ul.className = "tab-nav svelte-1usw1j1";
				div.className = "tab-content";
			},

			m: function mount(target, anchor) {
				insertNode(nav, target, anchor);
				appendNode(ul, nav);

				for (var i = 0; i < each_blocks.length; i += 1) {
					each_blocks[i].m(ul, null);
				}

				insertNode(text_1, target, anchor);
				insertNode(div, target, anchor);

				if (switch_instance) {
					switch_instance._mount(div, null);
				}
			},

			p: function update(changed, ctx) {
				if (changed.menu) {
					each_value = ctx.menu;

					for (var i = 0; i < each_value.length; i += 1) {
						const child_ctx = get_each_context$2(ctx, each_value, i);

						if (each_blocks[i]) {
							each_blocks[i].p(changed, child_ctx);
						} else {
							each_blocks[i] = create_each_block$2(component, child_ctx);
							each_blocks[i].c();
							each_blocks[i].m(ul, null);
						}
					}

					for (; i < each_blocks.length; i += 1) {
						each_blocks[i].u();
						each_blocks[i].d();
					}
					each_blocks.length = each_value.length;
				}

				if (switch_value !== (switch_value = ctx.selected)) {
					if (switch_instance) switch_instance.destroy();

					if (switch_value) {
						switch_instance = new switch_value(switch_props(ctx));
						switch_instance._fragment.c();
						switch_instance._mount(div, null);
					}
				}
			},

			u: function unmount() {
				detachNode(nav);

				for (var i = 0; i < each_blocks.length; i += 1) {
					each_blocks[i].u();
				}

				detachNode(text_1);
				detachNode(div);
			},

			d: function destroy$$1() {
				destroyEach(each_blocks);

				if (switch_instance) switch_instance.destroy(false);
			}
		};
	}

	// (3:4) {#each menu as item, i}
	function create_each_block$2(component, ctx) {
		var li, button, text, span, text_1_value = ctx.item.icon.text, text_1, button_class_value;

		function select_block_type(ctx) {
			if (ctx.item.icon.svg) return create_if_block$2;
			if (ctx.item.icon.img) return create_if_block_1$1;
			return create_if_block_2$1;
		}

		var current_block_type = select_block_type(ctx);
		var if_block = current_block_type(component, ctx);

		return {
			c: function create() {
				li = createElement("li");
				button = createElement("button");
				if_block.c();
				text = createText("\n        ");
				span = createElement("span");
				text_1 = createText(text_1_value);
				span.className = "text";

				button._svelte = { component, ctx };

				addListener(button, "click", click_handler);
				button.className = button_class_value = "menu-item " + (ctx.item.active ? 'active' : '') + " svelte-1usw1j1";
				li.className = "svelte-1usw1j1";
			},

			m: function mount(target, anchor) {
				insertNode(li, target, anchor);
				appendNode(button, li);
				if_block.m(button, null);
				appendNode(text, button);
				appendNode(span, button);
				appendNode(text_1, span);
			},

			p: function update(changed, ctx) {
				if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
					if_block.p(changed, ctx);
				} else {
					if_block.u();
					if_block.d();
					if_block = current_block_type(component, ctx);
					if_block.c();
					if_block.m(button, text);
				}

				if ((changed.menu) && text_1_value !== (text_1_value = ctx.item.icon.text)) {
					text_1.data = text_1_value;
				}

				button._svelte.ctx = ctx;
				if ((changed.menu) && button_class_value !== (button_class_value = "menu-item " + (ctx.item.active ? 'active' : '') + " svelte-1usw1j1")) {
					button.className = button_class_value;
				}
			},

			u: function unmount() {
				detachNode(li);
				if_block.u();
			},

			d: function destroy$$1() {
				if_block.d();
				removeListener(button, "click", click_handler);
			}
		};
	}

	// (6:8) {#if item.icon.svg}
	function create_if_block$2(component, ctx) {
		var span;

		var iconssvg_initial_data = { name: ctx.item.icon.svg };
		var iconssvg = new IconsSvg({
			root: component.root,
			data: iconssvg_initial_data
		});

		return {
			c: function create() {
				span = createElement("span");
				iconssvg._fragment.c();
				span.className = "icon svelte-1usw1j1";
			},

			m: function mount(target, anchor) {
				insertNode(span, target, anchor);
				iconssvg._mount(span, null);
			},

			p: function update(changed, ctx) {
				var iconssvg_changes = {};
				if (changed.menu) iconssvg_changes.name = ctx.item.icon.svg;
				iconssvg._set(iconssvg_changes);
			},

			u: function unmount() {
				detachNode(span);
			},

			d: function destroy$$1() {
				iconssvg.destroy(false);
			}
		};
	}

	// (10:31) 
	function create_if_block_1$1(component, ctx) {
		var span, img, img_src_value, img_alt_value;

		return {
			c: function create() {
				span = createElement("span");
				img = createElement("img");
				img.src = img_src_value = ctx.item.icon.img;
				img.alt = img_alt_value = ctx.item.icon.name;
				span.className = "icon svelte-1usw1j1";
			},

			m: function mount(target, anchor) {
				insertNode(span, target, anchor);
				appendNode(img, span);
			},

			p: function update(changed, ctx) {
				if ((changed.menu) && img_src_value !== (img_src_value = ctx.item.icon.img)) {
					img.src = img_src_value;
				}

				if ((changed.menu) && img_alt_value !== (img_alt_value = ctx.item.icon.name)) {
					img.alt = img_alt_value;
				}
			},

			u: function unmount() {
				detachNode(span);
			},

			d: noop
		};
	}

	// (14:8) {:else}
	function create_if_block_2$1(component, ctx) {
		var text_value = ctx.item.icon.name, text;

		return {
			c: function create() {
				text = createText(text_value);
			},

			m: function mount(target, anchor) {
				insertNode(text, target, anchor);
			},

			p: function update(changed, ctx) {
				if ((changed.menu) && text_value !== (text_value = ctx.item.icon.name)) {
					text.data = text_value;
				}
			},

			u: function unmount() {
				detachNode(text);
			},

			d: noop
		};
	}

	function get_each_context$2(ctx, list, i) {
		return assign(assign({}, ctx), {
			item: list[i],
			each_value: list,
			i: i
		});
	}

	function click_handler(event) {
		const { component, ctx } = this._svelte;

		component.toggleContent(ctx.i);
	}

	function ContentProfile(options) {
		this._debugName = '<ContentProfile>';
		if (!options || (!options.target && !options.root)) throw new Error("'target' is a required option");
		init(this, options);
		this._state = assign(data$1(), options.data);
		if (!('menu' in this._state)) console.warn("<ContentProfile> was created without expected data property 'menu'");
		if (!('selected' in this._state)) console.warn("<ContentProfile> was created without expected data property 'selected'");

		if (!options.root) {
			this._oncreate = [];
			this._beforecreate = [];
			this._aftercreate = [];
		}

		this._fragment = create_main_fragment$21(this, this._state);

		if (options.target) {
			if (options.hydrate) throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
			this._fragment.c();
			this._mount(options.target, options.anchor);

			this._lock = true;
			callAll(this._beforecreate);
			callAll(this._oncreate);
			callAll(this._aftercreate);
			this._lock = false;
		}
	}

	assign(ContentProfile.prototype, protoDev);
	assign(ContentProfile.prototype, methods);

	ContentProfile.prototype._checkReadOnly = function _checkReadOnly(newState) {
	};

	/* src/SidebarContent.html generated by Svelte v2.4.4 */

	function create_main_fragment$22(component, ctx) {
		var main, slot_content_default = component._slotted.default, h2, text_2, h2_1;

		return {
			c: function create() {
				main = createElement("main");
				if (!slot_content_default) {
					h2 = createElement("h2");
					h2.innerHTML = "Today Highlight <a class=\"right link\" href=\"/\">More</a>";
					text_2 = createText("\n    ");
					h2_1 = createElement("h2");
					h2_1.innerHTML = "Who to Follow <a class=\"right link\" href=\"/\">More</a>";
				}
				if (!slot_content_default) {
					h2.className = "title";
					h2_1.className = "title";
				}
				main.className = "svelte-18sdog";
			},

			m: function mount(target, anchor) {
				insertNode(main, target, anchor);
				if (!slot_content_default) {
					appendNode(h2, main);
					appendNode(text_2, main);
					appendNode(h2_1, main);
				}

				else {
					appendNode(slot_content_default, main);
				}
			},

			p: noop,

			u: function unmount() {
				detachNode(main);

				if (slot_content_default) {
					reinsertChildren(main, slot_content_default);
				}
			},

			d: noop
		};
	}

	function SidebarContent(options) {
		this._debugName = '<SidebarContent>';
		if (!options || (!options.target && !options.root)) throw new Error("'target' is a required option");
		init(this, options);
		this._state = assign({}, options.data);

		this._slotted = options.slots || {};

		this.slots = {};

		this._fragment = create_main_fragment$22(this, this._state);

		if (options.target) {
			if (options.hydrate) throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
			this._fragment.c();
			this._mount(options.target, options.anchor);
		}
	}

	assign(SidebarContent.prototype, protoDev);

	SidebarContent.prototype._checkReadOnly = function _checkReadOnly(newState) {
	};

	/* src/App.html generated by Svelte v2.4.4 */

	const USER = {
		img: ''
	};
	const PROFILE = {
		img: 'https://d3iw72m71ie81c.cloudfront.net/male-3.jpg',
		name: 'Mario Mendez',
		title: 'Senior Architect',
		stars: 5,
		followers: 320,
		following: 147,
		perf: 56,
		reviews: 42,
		banner: {
			img: 'https://i.imgur.com/MbMnM74.jpg',
			width: 130,
			top: -60,
			left: 0
		},
		projects: [
			{img: 'https://i.imgur.com/vZ8suUE.jpg', title: 'title', link: ''},
			{img: 'https://i.imgur.com/kKvl97S.jpg', title: 'title', link: ''},
			{img: 'https://i.imgur.com/6fQwQdQ.png', title: 'title', link: ''},
			{img: 'https://i.imgur.com/6eA8rHj.jpg', title: 'title', link: ''},
			{img: 'https://i.imgur.com/HZVeVDs.jpg', title: 'title', link: ''},
			{img: 'https://i.imgur.com/3JueZBg.jpg', title: 'title', link: ''},
			{img: 'https://i.imgur.com/mucT2Sl.jpg', title: 'title', link: ''},
			{img: 'https://i.imgur.com/tA6OlVu.jpg', title: 'title', link: ''},
			{img: 'https://i.imgur.com/w1bEuVW.jpg', title: 'title', link: ''},
			{img: 'https://i.imgur.com/V2Mt6RJ.jpg', title: 'title', link: ''}
		]
	};

	const ICONS = [
					{name: 'search', color: '#42A5D2', svg: 'Search'},
					{name: 'edit', color: '#FDAA29', svg: 'Edit'},
					{name: 'messages', color: '#F26C4F', svg: 'Message'},
					{name: 'agenda', color: '#058E85', svg: 'Agenda', 'text': 'Agenda'},
					{name: 'info', svg: 'Clipboard', text: 'Info'},
					{name: 'feed', url: '', text: 'Feed'},
					{name: 'resume', svg: 'Clip', text: 'Résumé'},
					{name: 'follow', svg: 'UserAdd'}
				];

	function data$2() {
		return {
			brand: {img: '', link: ''},
			icons: ICONS,
			mainNav: [
				{link: '', icon: 'search', active: true},
				{link: '', icon: 'edit'},
				{link: '', icon: 'messages'},
				{link: '', icon: 'agenda'}
			],
			user: USER,
			profile: PROFILE,
			profileMenu: [
				{link: 'ProfileInfo', icon: 'info'},
				{link: 'ProfileFeed', icon: 'feed', active: true},
				{link: 'ProfileAgenda', icon: 'agenda'},
				{link: 'ProfileResume', icon: 'resume'}
			],
		}
	}
	var methods$1 = {
		getIcons(menu) {
			var icons = this.get().icons;
			if (menu.length === 0) { return; }
			menu.forEach(item => {
				var found = icons.find(x => x.name === item.icon);
				if (found) item.icon = found;
				else item.icon = {name: item.icon};
			});
			return menu;
		}
	};

	function oncreate$1() {
		this.set({mainNav: this.getIcons(this.get().mainNav)});
		this.set({profileMenu: this.getIcons(this.get().profileMenu)});
	}
	function create_main_fragment$23(component, ctx) {
		var link, text, div, text_1, div_1, text_2, div_2, text_3, text_4, text_5, main, header, text_7, div_3, div_4, text_9, text_10, text_11;

		var sidenav_initial_data = {
		 	menu: ctx.mainNav,
		 	brand: ctx.brand,
		 	user: ctx.user
		 };
		var sidenav = new SideNav({
			root: component.root,
			data: sidenav_initial_data
		});

		var banner_initial_data = { banner: ctx.profile.banner };
		var banner = new Banner({
			root: component.root,
			data: banner_initial_data
		});

		var sidebarprofile_initial_data = { profile: ctx.profile };
		var sidebarprofile = new SidebarProfile({
			root: component.root,
			data: sidebarprofile_initial_data
		});

		var sidebar = new Sidebar({
			root: component.root,
			slots: { default: createFragment() }
		});

		var headerprofile_initial_data = { profile: ctx.profile };
		var headerprofile = new HeaderProfile({
			root: component.root,
			data: headerprofile_initial_data
		});

		var contentprofile_initial_data = { menu: ctx.profileMenu };
		var contentprofile = new ContentProfile({
			root: component.root,
			data: contentprofile_initial_data
		});

		var sidebarcontent = new SidebarContent({
			root: component.root
		});

		var sidebar_1 = new Sidebar({
			root: component.root,
			slots: { default: createFragment() }
		});

		return {
			c: function create() {
				link = createElement("link");
				text = createText("\n\n");
				div = createElement("div");
				sidenav._fragment.c();
				text_1 = createText("\n\t");
				div_1 = createElement("div");
				banner._fragment.c();
				text_2 = createText("\n\t\t");
				div_2 = createElement("div");
				text_3 = createText("\n\t\t\t\t");
				sidebarprofile._fragment.c();
				text_4 = createText("\n\t\t\t");
				sidebar._fragment.c();
				text_5 = createText("\n\t\t\t");
				main = createElement("main");
				header = createElement("header");
				headerprofile._fragment.c();
				text_7 = createText("\n\t\t\t\t");
				div_3 = createElement("div");
				div_4 = createElement("div");
				contentprofile._fragment.c();
				text_9 = createText("\n\t\t\t\t\t");
				text_10 = createText("\n\t\t\t\t\t\t");
				sidebarcontent._fragment.c();
				text_11 = createText("\n\t\t\t\t\t");
				sidebar_1._fragment.c();
				link.href = "https://fonts.googleapis.com/css?family=Palanquin:300";
				link.rel = "stylesheet";
				header.className = "row vCentered svelte-2qs14o";
				div_4.className = "content svelte-2qs14o";
				div_3.className = "row";
				main.className = "svelte-2qs14o";
				div_2.className = "row";
				div_1.className = "scroll";
				div.className = "page sidenav svelte-2qs14o";
			},

			m: function mount(target, anchor) {
				appendNode(link, document.head);
				insertNode(text, target, anchor);
				insertNode(div, target, anchor);
				sidenav._mount(div, null);
				appendNode(text_1, div);
				appendNode(div_1, div);
				banner._mount(div_1, null);
				appendNode(text_2, div_1);
				appendNode(div_2, div_1);
				appendNode(text_3, sidebar._slotted.default);
				sidebarprofile._mount(sidebar._slotted.default, null);
				appendNode(text_4, sidebar._slotted.default);
				sidebar._mount(div_2, null);
				appendNode(text_5, div_2);
				appendNode(main, div_2);
				appendNode(header, main);
				headerprofile._mount(header, null);
				appendNode(text_7, main);
				appendNode(div_3, main);
				appendNode(div_4, div_3);
				contentprofile._mount(div_4, null);
				appendNode(text_9, div_3);
				appendNode(text_10, sidebar_1._slotted.default);
				sidebarcontent._mount(sidebar_1._slotted.default, null);
				appendNode(text_11, sidebar_1._slotted.default);
				sidebar_1._mount(div_3, null);
			},

			p: function update(changed, ctx) {
				var sidenav_changes = {};
				if (changed.mainNav) sidenav_changes.menu = ctx.mainNav;
				if (changed.brand) sidenav_changes.brand = ctx.brand;
				if (changed.user) sidenav_changes.user = ctx.user;
				sidenav._set(sidenav_changes);

				var banner_changes = {};
				if (changed.profile) banner_changes.banner = ctx.profile.banner;
				banner._set(banner_changes);

				var sidebarprofile_changes = {};
				if (changed.profile) sidebarprofile_changes.profile = ctx.profile;
				sidebarprofile._set(sidebarprofile_changes);

				var headerprofile_changes = {};
				if (changed.profile) headerprofile_changes.profile = ctx.profile;
				headerprofile._set(headerprofile_changes);

				var contentprofile_changes = {};
				if (changed.profileMenu) contentprofile_changes.menu = ctx.profileMenu;
				contentprofile._set(contentprofile_changes);
			},

			u: function unmount() {
				detachNode(link);
				detachNode(text);
				detachNode(div);
			},

			d: function destroy$$1() {
				sidenav.destroy(false);
				banner.destroy(false);
				sidebarprofile.destroy(false);
				sidebar.destroy(false);
				headerprofile.destroy(false);
				contentprofile.destroy(false);
				sidebarcontent.destroy(false);
				sidebar_1.destroy(false);
			}
		};
	}

	function App(options) {
		this._debugName = '<App>';
		if (!options || (!options.target && !options.root)) throw new Error("'target' is a required option");
		init(this, options);
		this._state = assign(data$2(), options.data);
		if (!('mainNav' in this._state)) console.warn("<App> was created without expected data property 'mainNav'");
		if (!('brand' in this._state)) console.warn("<App> was created without expected data property 'brand'");
		if (!('user' in this._state)) console.warn("<App> was created without expected data property 'user'");
		if (!('profile' in this._state)) console.warn("<App> was created without expected data property 'profile'");
		if (!('profileMenu' in this._state)) console.warn("<App> was created without expected data property 'profileMenu'");

		if (!options.root) {
			this._oncreate = [];
			this._beforecreate = [];
			this._aftercreate = [];
		}

		this._fragment = create_main_fragment$23(this, this._state);

		this.root._oncreate.push(() => {
			oncreate$1.call(this);
			this.fire("update", { changed: assignTrue({}, this._state), current: this._state });
		});

		if (options.target) {
			if (options.hydrate) throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
			this._fragment.c();
			this._mount(options.target, options.anchor);

			this._lock = true;
			callAll(this._beforecreate);
			callAll(this._oncreate);
			callAll(this._aftercreate);
			this._lock = false;
		}
	}

	assign(App.prototype, protoDev);
	assign(App.prototype, methods$1);

	App.prototype._checkReadOnly = function _checkReadOnly(newState) {
	};

	var app = new App({
		target: document.body,
		data: {}
	});

	return app;

}());
//# sourceMappingURL=bundle.js.map
